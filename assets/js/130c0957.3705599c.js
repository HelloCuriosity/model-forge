"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[41],{8453:(e,r,o)=>{o.d(r,{R:()=>d,x:()=>s});var n=o(6540);const t={},i=n.createContext(t);function d(e){const r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(i.Provider,{value:r},e.children)}},8736:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>d,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"getting-started/custom-providers","title":"Custom Providers","description":"While Model Forge aims to fully automate model generation, you may run into an","source":"@site/docs/getting-started/custom-providers.md","sourceDirName":"getting-started","slug":"/getting-started/custom-providers","permalink":"/model-forge/docs/getting-started/custom-providers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/custom-providers.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Generating Models","permalink":"/model-forge/docs/getting-started/generate-models"},"next":{"title":"Supported Types","permalink":"/model-forge/docs/category/supported-types"}}');var t=o(4848),i=o(8453);const d={sidebar_position:3},s="Custom Providers",a={},l=[{value:"Define your provider",id:"define-your-provider",level:4},{value:"Add your provider to the forge",id:"add-your-provider-to-the-forge",level:4},{value:"Inline your provider(s)",id:"inline-your-providers",level:4}];function c(e){const r={code:"code",h1:"h1",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"custom-providers",children:"Custom Providers"})}),"\n",(0,t.jsx)(r.p,{children:"While Model Forge aims to fully automate model generation, you may run into an\ninstance where you need to customize your data. This is easily achievable by\ndefining a custom provider and adding it to the forge."}),"\n",(0,t.jsx)(r.h4,{id:"define-your-provider",children:"Define your provider"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:'val employeeProvider: Provider<Employee> = Provider {\n    Employee(\n        id = 15L,\n        name = "Josh",\n        dob = Instant.ofEpochMilli(1315260000000)\n    )\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"add-your-provider-to-the-forge",children:"Add your provider to the forge"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:"forge.addProvider(employeeProvider)\n"})}),"\n",(0,t.jsx)(r.h4,{id:"inline-your-providers",children:"Inline your provider(s)"}),"\n",(0,t.jsx)(r.p,{children:"Alternatively you can add your forgery providers inline"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-kotlin",children:'\nval forge = ModelForge().apply {\n    addProvider {\n        Employee(\n            id = 2L,\n            name = "Hendrik",\n            dob = Instant.ofEpochMilli(1574486400000)\n        )\n    }\n}\nval employee by forgery<Employee>(forge)\n\n'})})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);